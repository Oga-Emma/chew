import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.jetbrains.kotlin.jvm' version '1.9.21'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.21'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.21'
	id 'com.avast.gradle.docker-compose' version '0.17.6'
}

group = 'app.seven'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

test {
	useJUnitPlatform()
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	// Database
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.flywaydb:flyway-core'

	// spring doc
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'org.springdoc:springdoc-openapi-starter-common:2.3.0'

	implementation 'org.jetbrains.kotlin:kotlin-reflect'

	runtimeOnly 'org.postgresql:postgresql'
	developmentOnly('org.springframework.boot:spring-boot-docker-compose')


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'

	testImplementation 'io.kotest:kotest-runner-junit5:5.8.0'
	testImplementation 'io.mockk:mockk:1.13.8'
	testImplementation 'com.ninja-squad:springmockk:4.0.2'
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '17'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task bootRunDev {
	bootRun.configure {
		systemProperty "spring.profiles.active", 'dev'
	}
}

bootRunDev.finalizedBy bootRun

dockerCompose.isRequiredBy(bootRunDev)
dockerCompose.isRequiredBy(test)
